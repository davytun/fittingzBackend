// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  businessName       String
  contactPhone       String? // Optional
  businessAddress    String? // Optional
  clients            Client[]
  styleImages        StyleImage[] // Added relation to StyleImage
  isEmailVerified    Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  verificationTokens VerificationToken[]

  Project Project[]
  Order   Order[]
  Event   Event[]
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model VerificationToken {
  id        String    @id @default(cuid())
  token     String    @unique // This will store the hashed token
  type      TokenType
  email     String // Email of the user this token is for
  adminId   String? // Link to the admin user
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  admin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([email, type])
  @@index([adminId])
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PENDING)
  startDate   DateTime?
  dueDate     DateTime? // Changed from endDate to dueDate for clarity
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  adminId String
  admin   Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Order   Order[]

  @@index([clientId])
  @@index([adminId])
  @@index([status])
}

enum OrderStatus {
  PENDING_PAYMENT
  PROCESSING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

model Order {
  id               String            @id @default(cuid())
  orderNumber      String           
  details          Json?
  price            Decimal           @db.Decimal(10, 2)
  currency         String            @default("NGN")
  dueDate          DateTime?
  status           OrderStatus       @default(PENDING_PAYMENT)
  deposit          Decimal?          @db.Decimal(10, 2)
  styleDescription String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clientId         String
  client           Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  adminId          String
  admin            Admin             @relation(fields: [adminId], references: [id], onDelete: Cascade)
  projectId        String?
  project          Project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
  eventId          String?
  event            Event?            @relation(fields: [eventId], references: [id], onDelete: SetNull)
  styleImages      OrderStyleImage[]
  payments         Payment[]

  @@index([clientId])
  @@index([adminId])
  @@index([projectId])
  @@index([eventId])
  @@index([status])
  @@index([orderNumber])
}

model OrderStyleImage {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  styleImageId String
  styleImage   StyleImage @relation(fields: [styleImageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([orderId, styleImageId])
  @@index([orderId])
  @@index([styleImageId])
}

model Client {
  id                String        @id @default(cuid())
  name              String
  phone             String?
  email             String?
  eventType         String?
  favoriteColors    String[]      @default([])
  dislikedColors    String[]      @default([])
  preferredStyles   String[]      @default([])
  bodyShape         String?
  additionalDetails String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  admin             Admin         @relation(fields: [adminId], references: [id])
  adminId           String
  measurements      Measurement[]
  styleImages       StyleImage[]
  Project           Project[]
  Order             Order[]
  events            EventClient[]

  @@index([adminId])
}

model Measurement {
  id        String   @id @default(cuid())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String
  fields    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId])
  @@index([clientId])
}

model StyleImage {
  id          String   @id @default(cuid())
  client      Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String? // Made optional to support admin-owned images
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     String // Added to link images to admin
  imageUrl    String
  publicId    String
  category    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderStyleImages OrderStyleImage[]

  @@index([clientId])
  @@index([adminId])
  @@index([category])
}

model Event {
  id          String        @id @default(cuid())
  name        String
  description String?
  eventDate   DateTime?
  location    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  adminId     String
  admin       Admin         @relation(fields: [adminId], references: [id], onDelete: Cascade)
  clients     EventClient[]
  orders      Order[]

  @@index([adminId])
}

model EventClient {
  id        String   @id @default(cuid())
  eventId   String
  clientId  String
  role      String?
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([eventId, clientId])
  @@index([eventId])
  @@index([clientId])
}

model Payment {
  id          String   @id @default(cuid())
  orderId     String
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}
